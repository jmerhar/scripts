# This workflow automates the publication of a new script release.
# It is triggered automatically when a new release is published.
name: Publish New Script Release

# Controls when the workflow is triggered.
on:
  release:
    types: [published]

# Defines a single job that will run on an Ubuntu environment.
jobs:
  publish-all-scripts:
    runs-on: ubuntu-latest

    # We need to give the job permissions to write to other repos.
    permissions:
      contents: write

    steps:
      - name: Checkout main scripts repo
        uses: actions/checkout@v3
        with:
          path: scripts

      - name: Checkout Homebrew tap repo
        uses: actions/checkout@v3
        with:
          repository: jmerhar/homebrew-scripts
          path: homebrew-scripts
          token: ${{ secrets.PAT }}

      - name: Checkout APT repo
        uses: actions/checkout@v3
        with:
          repository: jmerhar/apt-scripts
          path: apt-scripts
          token: ${{ secrets.PAT }}

      - name: Setup Git for multi-repo push
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Prepare environment variables
        run: |
          echo "HOMEPAGE_URL=https://github.com/jmerhar/scripts" >> $GITHUB_ENV
          echo "HOMEBREW_FORMULA_DIR=./dist/homebrew" >> $GITHUB_ENV
          echo "DEB_PACKAGE_DIR=./dist/debian" >> $GITHUB_ENV
          echo "MAINTAINER_INFO=Jure Merhar <dev@merhar.si>" >> $GITHUB_ENV
          echo "TARBALL_URL=${{ github.event.release.tarball_url }}" >> $GITHUB_ENV
          echo "VERSION=${{ github.event.release.tag_name }}" >> $GITHUB_ENV
          echo "SHA256_CHECKSUM=$(curl -sSL ${{ github.event.release.tarball_url }} | shasum -a 256 | awk '{print $1}')" >> $GITHUB_ENV

      - name: Publish changed scripts
        run: |
          # Fetch all tags to find the previous one.
          git -C scripts fetch --tags
          PREV_TAG=$(git -C scripts tag --sort=-creatordate | sed '2!d')
          echo "Previous tag: ${PREV_TAG}, Current tag: ${{ github.event.release.tag_name }}"

          # Find all executable files changed between the previous and current release.
          git -C scripts diff --name-only "${PREV_TAG}" "${{ github.event.release.tag_name }}" | \
          while read script_path; do
            if [ -f "scripts/${script_path}" ] && head -n 1 "scripts/${script_path}" | grep -qE '^#!'; then
              echo "--- Publishing changed script: ${script_path} ---"
              ./scripts/system/publish-script.sh "scripts/${script_path}"
            fi
          done

      - name: Move Artifacts to Repositories
        run: |
          # Move Homebrew formulas, if any exist.
          if [ -d "${HOMEBREW_FORMULA_DIR}" ] && [ -n "$(find "${HOMEBREW_FORMULA_DIR}" -maxdepth 1 -name '*.rb' -print -quit)" ]; then
            echo "Moving Homebrew formulas..."
            mkdir -p ./homebrew-scripts/Formula
            mv ${HOMEBREW_FORMULA_DIR}/*.rb ./homebrew-scripts/Formula/
          else
            echo "No new Homebrew formulas to move."
          fi

          # Move Debian packages, if any exist.
          if [ -d "${DEB_PACKAGE_DIR}" ] && [ -n "$(find "${DEB_PACKAGE_DIR}" -maxdepth 1 -name '*.deb' -print -quit)" ]; then
            echo "Moving Debian packages..."
            mkdir -p ./apt-scripts/pool/main
            mv ${DEB_PACKAGE_DIR}/*.deb ./apt-scripts/pool/main/
          else
            echo "No new Debian packages to move."
          fi

      - name: Commit and push Homebrew changes
        run: |
          cd homebrew-scripts
          git add .
          git commit -m "chore: automated formula update for release ${{ github.event.release.tag_name }}" || echo "No Homebrew changes to commit."
          git push

      - name: Import GPG key and sign APT repository
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        run: |
          cd apt-scripts
          # Import the GPG key from the secret.
          echo "$GPG_PRIVATE_KEY" | gpg --batch --import --passphrase "$GPG_PASSPHRASE"

          # Generate the Packages and Release files.
          dpkg-scanpackages --arch=all pool/ > dists/stable/main/binary-all/Packages
          gzip -c dists/stable/main/binary-all/Packages > dists/stable/main/binary-all/Packages.gz
          apt-ftparchive -c apt-ftparchive.conf release dists/stable/ > dists/stable/Release

          # CRITICAL: Verify that the Release file was created and is not empty.
          test -s dists/stable/Release || (echo "::error::Failed to generate a valid Release file. Check apt-ftparchive.conf." && exit 1)

          # Remove the old InRelease file to prevent GPG from failing.
          rm -f dists/stable/InRelease

          # Sign the release file using the clearsign method for the InRelease file.
          gpg --batch --pinentry-mode loopback --passphrase "$GPG_PASSPHRASE" --default-key "jmerhar-bot" --clearsign -o dists/stable/InRelease dists/stable/Release

      - name: Commit and push APT repository changes
        run: |
          cd apt-scripts
          git add .
          git commit -m "chore: automated APT repo update for release ${{ github.event.release.tag_name }}" || echo "No APT changes to commit."
          git push
